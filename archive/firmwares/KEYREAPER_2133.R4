#include <WiFiS3.h>
#include <Wire.h>

// WiFi configuration
const char* ssid = "KEYREAPER_2133.R4";
const char* password = "2133";

// WiFi server
WiFiServer server(80);

// PN532 I2C address
#define PN532_I2C_ADDRESS 0x24

// Enhanced card history buffer with detailed data extraction
struct CardEntry {
  String uid;
  String cardType;
  String timestamp;
  String rawHexData;
  String readableData;
  String blockData[16]; // Store up to 16 blocks of data
  int blocksRead;
  String accessLevel;
};

CardEntry cardBuffer[25]; // Reduced for memory constraints
int bufferHead = 0;
int bufferCount = 0;

// System state
bool continuousScanning = false;
unsigned long lastScan = 0;
unsigned long scanInterval = 800; // Faster scanning
String systemStatus = "OPERATIONAL";
bool deepScanMode = true; // Enhanced data extraction

void setup() {
  Serial.begin(115200);
  
  // Initialize I2C
  Wire.begin();
  
  // Initialize PN532
  if (!initPN532()) {
    Serial.println("[CRITICAL] PN532 initialization failed - hardware fault detected");
    systemStatus = "HARDWARE_FAULT";
    while(1);
  }
  
  Serial.println("[STATUS] PN532 operational - RFID surveillance active");
  
  // Setup WiFi Access Point with enhanced security posture
  Serial.println("[NETWORK] Establishing covert access point...");
  
  WiFi.end();
  delay(1000);
  
  WiFi.config(IPAddress(192, 168, 4, 1), IPAddress(192, 168, 4, 1), IPAddress(255, 255, 255, 0));
  
  if (WiFi.beginAP(ssid, password) == WL_AP_LISTENING) {
    Serial.println("[NETWORK] Secure mesh established - surveillance grid active");
    systemStatus = "SURVEILLANCE_ACTIVE";
  } else {
    Serial.println("[WARNING] Primary AP failed - deploying fallback protocol");
    WiFi.beginAP(ssid);
    systemStatus = "DEGRADED_MODE";
  }
  
  delay(3000);
  
  Serial.print("[NETWORK] Grid Status: ");
  Serial.println(WiFi.status());
  Serial.print("[NETWORK] Access Point: ");
  Serial.println(WiFi.SSID());
  Serial.print("[NETWORK] Command IP: ");
  Serial.println(WiFi.localIP());
  
  server.begin();
  Serial.println("[WEB] Command interface deployed on port 80");
  Serial.println("[SYSTEM] KEYREAPER 2133.R4 - Full operational status achieved");
}

void loop() {
  handleWebClients();
  
  if (continuousScanning && (millis() - lastScan > scanInterval)) {
    performEnhancedScan();
    lastScan = millis();
  }
  
  delay(8);
}

bool initPN532() {
  // Enhanced initialization sequence with multiple attempts
  for (int attempts = 0; attempts < 3; attempts++) {
    Wire.beginTransmission(PN532_I2C_ADDRESS);
    Wire.write(0x55); Wire.write(0x55); Wire.write(0x00); Wire.write(0x00);
    Wire.write(0x00); Wire.write(0x00); Wire.write(0x00); Wire.write(0x00);
    Wire.write(0x00); Wire.write(0x00); Wire.write(0x00); Wire.write(0x00);
    Wire.write(0x00); Wire.write(0x00); Wire.write(0x00); Wire.write(0x00);
    Wire.write(0xFF); Wire.write(0x03); Wire.write(0xFD); Wire.write(0xD4);
    Wire.write(0x02); Wire.write(0x2A);
    
    if (Wire.endTransmission() == 0) {
      delay(100);
      
      // SAM Configuration
      uint8_t samConfig[] = {0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x17, 0x00, 0x00};
      Wire.beginTransmission(PN532_I2C_ADDRESS);
      for (int i = 0; i < sizeof(samConfig); i++) {
        Wire.write(samConfig[i]);
      }
      Wire.endTransmission();
      delay(100);
      return true;
    }
    delay(200);
  }
  return false;
}

bool performEnhancedScan() {
  uint8_t inListCmd[] = {0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, 0x00};
  
  Wire.beginTransmission(PN532_I2C_ADDRESS);
  for (int i = 0; i < sizeof(inListCmd); i++) {
    Wire.write(inListCmd[i]);
  }
  Wire.endTransmission();
  
  delay(100);
  
  Wire.requestFrom(PN532_I2C_ADDRESS, 25);
  if (Wire.available() < 10) return false;
  
  uint8_t response[25];
  int bytesRead = 0;
  while (Wire.available() && bytesRead < 25) {
    response[bytesRead] = Wire.read();
    bytesRead++;
  }
  
  if (bytesRead > 14 && response[7] == 0x4B && response[8] == 0x01) {
    int uidLength = response[12];
    String uid = "";
    for (int i = 0; i < uidLength && i < 7; i++) {
      if (response[13 + i] < 0x10) uid += "0";
      uid += String(response[13 + i], HEX);
    }
    uid.toUpperCase();
    
    String cardType = determineCardType(uidLength, response, bytesRead);
    String accessLevel = determineAccessLevel(response);
    
    // Enhanced data extraction
    CardEntry newEntry;
    newEntry.uid = uid;
    newEntry.cardType = cardType;
    newEntry.timestamp = String(millis());
    newEntry.accessLevel = accessLevel;
    newEntry.blocksRead = 0;
    
    if (deepScanMode) {
      extractCardData(newEntry);
    }
    
    addEnhancedCardToBuffer(newEntry);
    
    Serial.print("[INTERCEPT] UID: ");
    Serial.print(uid);
    Serial.print(" | Type: ");
    Serial.print(cardType);
    Serial.print(" | Access: ");
    Serial.println(accessLevel);
    
    return true;
  }
  return false;
}

String determineCardType(int uidLength, uint8_t* response, int bytesRead) {
  if (uidLength == 4) {
    // Check SAK for specific MIFARE variant
    if (bytesRead > 20) {
      uint8_t sak = response[20];
      if (sak == 0x08) return "MIFARE_CLASSIC_1K";
      if (sak == 0x18) return "MIFARE_CLASSIC_4K";
      if (sak == 0x28) return "MIFARE_CLASSIC_1K_EMULATED";
    }
    return "MIFARE_CLASSIC_1K";
  } else if (uidLength == 7) {
    return "MIFARE_ULTRALIGHT";
  } else if (uidLength == 10) {
    return "DESFIRE_EV1";
  }
  return "UNKNOWN_PROTOCOL";
}

String determineAccessLevel(uint8_t* response) {
  // Basic access level determination based on response patterns
  if (response[8] == 0x01) {
    if (response[12] == 4) return "STANDARD_ACCESS";
    if (response[12] == 7) return "ENHANCED_ACCESS";
    if (response[12] == 10) return "SECURE_ACCESS";
  }
  return "UNKNOWN_ACCESS";
}

void extractCardData(CardEntry& entry) {
  // Attempt to read multiple data blocks with various authentication keys
  uint8_t keys[][6] = {
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // Default key
    {0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5}, // Common hotel key
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // Null key
    {0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC}  // Common weak key
  };
  
  String combinedHex = "";
  String readableData = "";
  
  for (int block = 1; block < 16 && entry.blocksRead < 10; block++) {
    for (int keyIndex = 0; keyIndex < 4; keyIndex++) {
      if (authenticateAndReadBlock(block, keys[keyIndex], entry, keyIndex)) {
        break; // Successfully read this block, move to next
      }
    }
  }
  
  entry.rawHexData = combinedHex;
  entry.readableData = readableData;
}

bool authenticateAndReadBlock(int blockNum, uint8_t* key, CardEntry& entry, int keyIndex) {
  // Authenticate
  uint8_t authCmd[] = {0x00, 0x00, 0xFF, 0x0F, 0xF1, 0xD4, 0x40, 0x01, 0x60, (uint8_t)blockNum};
  for (int i = 0; i < 6; i++) {
    authCmd[10 + i] = key[i];
  }
  authCmd[16] = 0x00; authCmd[17] = 0x00; authCmd[18] = 0x00; authCmd[19] = 0x00;
  authCmd[20] = 0xC4; authCmd[21] = 0x00;
  
  Wire.beginTransmission(PN532_I2C_ADDRESS);
  for (int i = 0; i < 22; i++) {
    Wire.write(authCmd[i]);
  }
  Wire.endTransmission();
  delay(50);
  
  // Read block
  uint8_t readCmd[] = {0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x40, 0x01, 0x30, (uint8_t)blockNum, 0x00};
  Wire.beginTransmission(PN532_I2C_ADDRESS);
  for (int i = 0; i < sizeof(readCmd); i++) {
    Wire.write(readCmd[i]);
  }
  Wire.endTransmission();
  delay(50);
  
  Wire.requestFrom(PN532_I2C_ADDRESS, 20);
  if (Wire.available() >= 16) {
    uint8_t blockData[16];
    String blockHex = "";
    String blockAscii = "";
    
    // Skip response headers and read data
    for (int i = 0; i < 8; i++) Wire.read(); // Skip headers
    
    for (int i = 0; i < 16; i++) {
      if (Wire.available()) {
        blockData[i] = Wire.read();
        if (blockData[i] < 0x10) blockHex += "0";
        blockHex += String(blockData[i], HEX);
        
        if (blockData[i] >= 32 && blockData[i] <= 126) {
          blockAscii += (char)blockData[i];
        } else {
          blockAscii += ".";
        }
      }
    }
    
    entry.blockData[entry.blocksRead] = "BLK" + String(blockNum) + ":" + blockHex + "|" + blockAscii;
    entry.blocksRead++;
    return true;
  }
  return false;
}

void addEnhancedCardToBuffer(CardEntry& entry) {
  cardBuffer[bufferHead] = entry;
  bufferHead = (bufferHead + 1) % 25;
  if (bufferCount < 25) bufferCount++;
}

bool writeToCard(String hexData) {
  if (!performEnhancedScan()) return false;
  
  uint8_t writeData[16] = {0};
  int dataLen = min(32, (int)hexData.length()) / 2;
  
  for (int i = 0; i < dataLen; i++) {
    String byteString = hexData.substring(i * 2, i * 2 + 2);
    writeData[i] = (uint8_t)strtol(byteString.c_str(), NULL, 16);
  }
  
  // Enhanced write with multiple key attempts
  uint8_t keys[][6] = {
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
    {0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  };
  
  for (int keyIndex = 0; keyIndex < 3; keyIndex++) {
    uint8_t authCmd[] = {0x00, 0x00, 0xFF, 0x0F, 0xF1, 0xD4, 0x40, 0x01, 0x60, 0x04};
    for (int i = 0; i < 6; i++) {
      authCmd[10 + i] = keys[keyIndex][i];
    }
    authCmd[16] = 0x00; authCmd[17] = 0x00; authCmd[18] = 0x00; authCmd[19] = 0x00;
    authCmd[20] = 0xC4; authCmd[21] = 0x00;
    
    Wire.beginTransmission(PN532_I2C_ADDRESS);
    for (int i = 0; i < 22; i++) {
      Wire.write(authCmd[i]);
    }
    Wire.endTransmission();
    delay(100);
    
    uint8_t writeCmd[27] = {0x00, 0x00, 0xFF, 0x15, 0xEB, 0xD4, 0x40, 0x01, 0xA0, 0x04};
    for (int i = 0; i < 16; i++) {
      writeCmd[10 + i] = writeData[i];
    }
    
    uint8_t checksum = 0;
    for (int i = 5; i < 26; i++) {
      checksum += writeCmd[i];
    }
    writeCmd[26] = (uint8_t)(0x100 - checksum);
    
    Wire.beginTransmission(PN532_I2C_ADDRESS);
    for (int i = 0; i < sizeof(writeCmd); i++) {
      Wire.write(writeCmd[i]);
    }
    if (Wire.endTransmission() == 0) {
      delay(100);
      return true; // Write successful
    }
  }
  return false;
}

void handleWebClients() {
  WiFiClient client = server.available();
  if (!client) return;
  
  String request = "";
  String postData = "";
  
  while (client.connected() && client.available()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      // Read POST data if present
      if (request.indexOf("POST") >= 0) {
        while (client.available()) {
          postData += (char)client.read();
        }
      }
      break;
    }
    if (request.length() == 0) request = line;
  }
  
  // Enhanced routing
  if (request.indexOf("GET / ") >= 0) {
    sendEnhancedWebInterface(client);
  } else if (request.indexOf("GET /api/scan") >= 0) {
    handleManualScan(client);
  } else if (request.indexOf("GET /api/history") >= 0) {
    sendEnhancedCardHistory(client);
  } else if (request.indexOf("POST /api/write") >= 0) {
    handleEnhancedWriteRequest(client, postData);
  } else if (request.indexOf("GET /api/toggle") >= 0) {
    toggleContinuousScanning(client);
  } else if (request.indexOf("GET /api/status") >= 0) {
    sendSystemStatus(client);
  } else if (request.indexOf("GET /api/deepmode") >= 0) {
    toggleDeepScanMode(client);
  } else {
    send404(client);
  }
  
  client.stop();
}

void sendEnhancedWebInterface(WiFiClient &client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println("Connection: close");
  client.println();
  
  client.println("<!DOCTYPE html><html><head><title>KEYREAPER 2133.R4</title>");
  client.println("<style>body{font-family:monospace;background:#000;color:#f00;padding:20px;}");
  client.println(".panel{border:2px solid #f00;padding:20px;margin:10px;background:#111;}");
  client.println("button{background:#333;color:#f00;border:1px solid #f00;padding:15px;margin:5px;cursor:pointer;}");
  client.println("button:hover{background:#f00;color:#000;}input{background:#000;color:#f00;border:1px solid #f00;padding:10px;width:300px;}");
  client.println(".status{text-align:center;font-size:18px;margin:20px;padding:15px;border:1px solid #f00;}");
  client.println(".history{max-height:400px;overflow-y:auto;border:1px solid #f00;padding:10px;background:#222;}");
  client.println(".card{border-bottom:1px solid #555;padding:10px;}.uid{color:#fff;font-weight:bold;}</style></head><body>");
  
  client.println("<h1>KEYREAPER 2133.R4 - CLASSIFIED</h1>");
  client.println("<div class='panel'><h2>RFID CONTROL</h2>");
  client.println("<button onclick='scan()'>MANUAL SCAN</button>");
  client.println("<button onclick='toggle()' id='toggleBtn'>START CONTINUOUS</button>");
  client.println("<button onclick='clear()'>CLEAR</button>");
  client.println("<div class='status' id='status'>READY</div>");
  client.println("<input type='text' id='hexInput' placeholder='HEX DATA' maxlength='32'>");
  client.println("<button onclick='write()'>WRITE</button></div>");
  
  client.println("<div class='panel'><h2>INTERCEPTS</h2>");
  client.println("<div class='history' id='history'>Awaiting intercepts...</div></div>");
  
  client.println("<script>");
  client.println("let cont=false;");
  client.println("function scan(){document.getElementById('status').innerHTML='SCANNING...';");
  client.println("fetch('/api/scan').then(r=>r.json()).then(d=>{");
  client.println("if(d.success)document.getElementById('status').innerHTML='TARGET: '+d.uid;");
  client.println("else document.getElementById('status').innerHTML='NO TARGET';refresh();});}");
  
  client.println("function toggle(){fetch('/api/toggle').then(r=>r.json()).then(d=>{");
  client.println("cont=d.continuous;document.getElementById('toggleBtn').innerHTML=cont?'STOP':'START';");
  client.println("document.getElementById('status').innerHTML=cont?'SURVEILLANCE ACTIVE':'PAUSED';});}");
  
  client.println("function write(){let h=document.getElementById('hexInput').value;");
  client.println("if(!h)return;document.getElementById('status').innerHTML='WRITING...';");
  client.println("fetch('/api/write',{method:'POST',headers:{'Content-Type':'application/json'},");
  client.println("body:JSON.stringify({data:h})}).then(r=>r.json()).then(d=>{");
  client.println("document.getElementById('status').innerHTML=d.success?'WRITE OK':'WRITE FAILED');");
  client.println("if(d.success)document.getElementById('hexInput').value='';});}");
  
  client.println("function refresh(){fetch('/api/history').then(r=>r.json()).then(d=>{");
  client.println("let h='';if(d.cards&&d.cards.length>0){");
  client.println("d.cards.forEach(c=>{h+='<div class=\"card\"><div class=\"uid\">'+c.uid+'</div>';");
  client.println("h+='<div>'+c.type+' | '+new Date(parseInt(c.timestamp)).toLocaleTimeString()+'</div></div>';});}");
  client.println("else h='No intercepts';document.getElementById('history').innerHTML=h;});}");
  
  client.println("function clear(){document.getElementById('history').innerHTML='Cleared';}");
  client.println("refresh();setInterval(()=>{if(cont)refresh();},3000);");
  client.println("</script></body></html>");
}

void handleManualScan(WiFiClient &client) {
  bool cardFound = performEnhancedScan();
  
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  if (cardFound && bufferCount > 0) {
    int lastIndex = (bufferHead - 1 + 25) % 25;
    client.print("{\"success\":true,\"uid\":\"");
    client.print(cardBuffer[lastIndex].uid);
    client.print("\",\"type\":\"");
    client.print(cardBuffer[lastIndex].cardType);
    client.print("\",\"access\":\"");
    client.print(cardBuffer[lastIndex].accessLevel);
    client.print("\",\"blocks\":");
    client.print(cardBuffer[lastIndex].blocksRead);
    client.println("}");
  } else {
    client.println("{\"success\":false,\"error\":\"No target in range\"}");
  }
}

void sendEnhancedCardHistory(WiFiClient &client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  client.print("{\"cards\":[");
  
  int startIndex = (bufferHead - bufferCount + 25) % 25;
  for (int i = bufferCount - 1; i >= 0; i--) { // Reverse order for newest first
    if (i < bufferCount - 1) client.print(",");
    int index = (startIndex + i) % 75;
    
    client.print("{\"uid\":\"");
    client.print(cardBuffer[index].uid);
    client.print("\",\"type\":\"");
    client.print(cardBuffer[index].cardType);
    client.print("\",\"access\":\"");
    client.print(cardBuffer[index].accessLevel);
    client.print("\",\"timestamp\":\"");
    client.print(cardBuffer[index].timestamp);
    client.print("\",\"blockCount\":");
    client.print(cardBuffer[index].blocksRead);
    client.print(",\"blocks\":[");
    
    for (int j = 0; j < cardBuffer[index].blocksRead; j++) {
      if (j > 0) client.print(",");
      client.print("\"");
      client.print(cardBuffer[index].blockData[j]);
      client.print("\"");
    }
    client.print("]}");
  }
  
  client.println("]}");
}

void handleEnhancedWriteRequest(WiFiClient &client, String postData) {
  int dataStart = postData.indexOf("\"data\":\"") + 8;
  int dataEnd = postData.indexOf("\"", dataStart);
  String hexData = "";
  if (dataStart > 7 && dataEnd > dataStart) {
    hexData = postData.substring(dataStart, dataEnd);
  }
  
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  if (hexData.length() > 0 && writeToCard(hexData)) {
    client.println("{\"success\":true,\"message\":\"Data injection successful\"}");
    Serial.print("[WRITE] Payload injected: ");
    Serial.println(hexData);
  } else {
    client.println("{\"success\":false,\"error\":\"Target secured against injection\"}");
  }
}

void toggleContinuousScanning(WiFiClient &client) {
  continuousScanning = !continuousScanning;
  
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  client.print("{\"continuous\":");
  client.print(continuousScanning ? "true" : "false");
  client.println("}");
  
  Serial.print("[SURVEILLANCE] Continuous mode: ");
  Serial.println(continuousScanning ? "ACTIVE" : "PAUSED");
}

void toggleDeepScanMode(WiFiClient &client) {
  deepScanMode = !deepScanMode;
  
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  client.print("{\"deepmode\":");
  client.print(deepScanMode ? "true" : "false");
  client.println("}");
  
  Serial.print("[DEEPSCAN] Enhanced extraction: ");
  Serial.println(deepScanMode ? "ENABLED" : "DISABLED");
}

void sendSystemStatus(WiFiClient &client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  
  client.print("{\"status\":\"");
  client.print(systemStatus);
  client.print("\",\"buffer_used\":");
  client.print(bufferCount);
  client.print(",\"buffer_max\":75");
  client.print(",\"continuous\":");
  client.print(continuousScanning ? "true" : "false");
  client.print(",\"deepmode\":");
  client.print(deepScanMode ? "true" : "false");
  client.println("}");
}

void send404(WiFiClient &client) {
  client.println("HTTP/1.1 404 Not Found");
  client.println("Content-Type: text/plain");
  client.println("Connection: close");
  client.println();
  client.println("404 - Unauthorized Access Attempt Logged");
}
